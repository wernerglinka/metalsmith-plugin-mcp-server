/**
 * Metalsmith Native Methods
 * This plugin uses Metalsmith's built-in methods:
 * - metalsmith.match(patterns, files) for pattern matching
 * - metalsmith.debug(namespace) for debug logging
 * - metalsmith.metadata() for accessing global metadata
 * - metalsmith.path() for path operations
 * - metalsmith.source() and metalsmith.destination() for directories
 */
{% if hasAsyncProcessing %}import { processAsync } from './processors/async.js';
{% endif %}{% if hasBackgroundProcessing %}import { createWorkerPool } from './workers/pool.js';
{% endif %}{% if hasMetadataGeneration %}import { generateMetadata } from './metadata/generator.js';
{% endif %}import { normalizeOptions, validateFiles, deepMerge } from './utils/config.js';

/**
 * Default options
 * @type {Object}
 * @property {string} pattern - Files to process (always exists after merge)
 * @property {string[]} ignore - Files to ignore (always exists after merge)
 * 
 * IMPORTANT: After deepMerge(defaults, userOptions), all default properties
 * are guaranteed to exist. User options can override values but cannot remove
 * properties. This means:
 * - pattern will NEVER be null or undefined
 * - ignore will NEVER be null or undefined
 */
const defaults = {
  pattern: '**/*',
  ignore: [],
{% if hasAsyncProcessing %}  async: false,
  batchSize: 10,{% endif %}
{% if hasBackgroundProcessing %}  workers: 4,
  concurrent: true,{% endif %}
{% if hasMetadataGeneration %}  metadata: true,
  metadataKey: '_{{ pluginNameShort }}',{% endif %}
};

/**
 * Plugin options
 * @typedef {Object} Options
 * @property {string|string[]} pattern - Files to process
 * @property {string|string[]} ignore - Files to ignore
{% if hasAsyncProcessing %} * @property {boolean} [async=false] - Enable async processing
 * @property {number} [batchSize=10] - Batch size for processing{% endif %}
{% if hasBackgroundProcessing %} * @property {number} [workers=4] - Number of worker threads
 * @property {boolean} [concurrent=true] - Enable concurrent processing{% endif %}
{% if hasMetadataGeneration %} * @property {boolean} [metadata=true] - Generate metadata
 * @property {string} [metadataKey='_{{ pluginNameShort }}'] - Metadata key{% endif %}
 */

/**
 * {{ description }}
 *
 * @param {Options} options - Plugin options
 * @returns {import('metalsmith').Plugin} Metalsmith plugin function
 */
export default function {{ functionName }}(options = {}) {
  // Normalize options with defaults
  const config = deepMerge(defaults, options);
  
  // Return the actual plugin function (two-phase pattern)
  const metalsmithPlugin = async function (files, metalsmith, done) {
    const debug = metalsmith.debug('{{ pluginName }}');
    debug('Starting {{ pluginName }} with options:', config);
    
    try {
      // Normalize and validate options
      const normalizedOptions = normalizeOptions(config);
      
      // Get files to process
      const filesToProcess = validateFiles(files, normalizedOptions, metalsmith);
      
      if (filesToProcess.length === 0) {
        debug('No files to process');
        return done();
      }
      
      debug(`Processing ${filesToProcess.length} files`);
      
{% if hasBackgroundProcessing %}
      // Initialize worker pool if concurrent processing is enabled
      let workerPool = null;
      if (normalizedOptions.concurrent) {
        workerPool = await createWorkerPool(normalizedOptions.workers);
      }
      
      try {
{% endif %}
        // Process files
        await Promise.all(
          filesToProcess.map(async (filename) => {
            try {
              const file = files[filename];
              debug(`Processing file: ${filename}`);
              
{% if pluginType == 'processor' %}
              // Process file content
              const processedContent = await processFile(file, filename, normalizedOptions);
              file.contents = Buffer.from(processedContent);
{% endif %}
              
{% if pluginType == 'transformer' %}
              // Transform file
              const transformed = await transformFile(file, filename, normalizedOptions);
              Object.assign(file, transformed);
{% endif %}
              
{% if pluginType == 'validator' %}
              // Validate file
              const isValid = await validateFile(file, filename, normalizedOptions);
              if (!isValid) {
                throw new Error(`Validation failed for ${filename}`);
              }
{% endif %}
              
{% if hasAsyncProcessing %}
              // Apply async processing if enabled
              if (normalizedOptions.async) {
                await processAsync(file, filename, normalizedOptions);
              }
{% endif %}
              
{% if hasMetadataGeneration %}
              // Generate metadata if enabled
              if (normalizedOptions.metadata) {
                const metadata = await generateMetadata(file, filename, normalizedOptions);
                file[normalizedOptions.metadataKey] = metadata;
              }
{% endif %}
              
              debug(`Successfully processed: ${filename}`);
            } catch (error) {
              debug(`Error processing ${filename}:`, error);
              throw error;
            }
          })
        );
{% if hasBackgroundProcessing %}
      } finally {
        // Clean up worker pool
        if (workerPool) {
          await workerPool.terminate();
        }
      }
{% endif %}
      
      debug('{{ pluginName }} completed successfully');
      done();
    } catch (error) {
      debug('{{ pluginName }} failed:', error);
      done(error);
    }
  };

  // Set function name for debugging (helps with stack traces and debugging)
  Object.defineProperty(metalsmithPlugin, 'name', { 
    value: '{{ functionName }}Plugin',
    configurable: true 
  });
  
  return metalsmithPlugin;
}

{% if pluginType == 'processor' %}
/**
 * Process file content
 * @param {Object} file - Metalsmith file object
 * @param {string} filename - File name
 * @param {Object} options - Processing options
 * @returns {Promise<string>} Processed content
 */
async function processFile(file, filename, options) {
  // TODO: Implement file processing logic
  return file.contents.toString();
}
{% endif %}

{% if pluginType == 'transformer' %}
/**
 * Transform file
 * @param {Object} file - Metalsmith file object
 * @param {string} filename - File name
 * @param {Object} options - Transformation options
 * @returns {Promise<Object>} Transformed file properties
 */
async function transformFile(file, filename, options) {
  // TODO: Implement file transformation logic
  return {};
}
{% endif %}

{% if pluginType == 'validator' %}
/**
 * Validate file
 * @param {Object} file - Metalsmith file object
 * @param {string} filename - File name
 * @param {Object} options - Validation options
 * @returns {Promise<boolean>} Validation result
 */
async function validateFile(file, filename, options) {
  // TODO: Implement file validation logic
  return true;
}
{% endif %}